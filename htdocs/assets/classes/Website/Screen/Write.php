<?php

namespace EVEBiographies;

class Website_Screen_Write extends Website_Screen
{
   /**
    * @var \HTML_QuickForm2
    */
    protected $form;

   /**
    * @var Biographies_Biography
    */
    protected $biography;

    protected $activeTab = 'text';

    protected $tabs;

    protected function _start()
    {
        $this->biography = $this->character->getBiography();

        if($this->request->getBool('delete-portrait')) {
            $this->handlePortraitDelete();
        }

        $this->initTabs();
        $this->resolveActiveTab();

        $this->createSettingsForm();

        if($this->form->isSubmitted() && $this->form->validate()) {
            $this->saveBiography();
        }
    }

    protected function initTabs()
    {
        $this->addTab(
            'text',
            t('Biography text'),
            array(
                'biography'
            )
        );

        $this->addTab(
            'layout',
            t('Layout options'),
            array(
                'portrait',
                'font',
                'skin',
                'background'
            )
        );

        $this->addTab(
            'share',
            t('View / share')
        );

        $this->addTab(
            'delete',
            t('Delete biography')
        );
    }

    protected function addTab($id, $label, $formElements=null)
    {
        $this->tabs[$id] = array(
            'label' => $label,
            'url' => $this->getURL(array('tab' => $id)),
            'elements' => $formElements
        );
    }

    protected function resolveActiveTab()
    {
        $tabID = $this->request->getParam('tab');
        if(!empty($tabID) && isset($this->tabs[$tabID])) {
            $this->activeTab = $tabID;
        }
    }

    public function requiresAuthentication()
    {
        return true;
    }

    public function getDispatcher()
    {
        return 'write.php';
    }

    public function getPrettyDispatcher()
    {
        return 'write';
    }

    protected function getSkinID()
    {
        return 'Website';
    }

    public function getPageTitle()
    {
        return $this->website->getCharacter()->getName();
    }

    public function getNavigationTitle()
    {
        return t('My biography');
    }

    protected function _render()
    {
        $tpl = $this->createTemplate('write'.ucfirst($this->activeTab));
        $tpl->addVar('form', $this->form);
        $tpl->addVar('editor-id', $this->editorID);
        $tpl->addVar('thumbnail-elements', $this->thumbnailElements);
        $tpl->addVar('active-tab', $this->activeTab);
        $tpl->addVar('tabs', $this->tabs);

        return $tpl->render();
    }

   /**
    * @var \HTML_QuickForm2_Element_InputFile
    */
    protected $portraitEl;

    protected $portraitSize = '1024 x 1024';

    protected $portraitMimes = array(
        'image/jpeg' => 'jpg',
        'image/png' => 'png'
    );

    protected function elementEnabled($fieldName)
    {
        return isset($this->tabs[$this->activeTab]['elements']) && in_array($fieldName, $this->tabs[$this->activeTab]['elements']);
    }

    protected $editorID = 'bio-editor';

    protected function createSettingsForm()
    {
        $form = $this->createForm(null, array(
            'biography' => $this->biography->getText(),
            'font' => $this->biography->getFontID(),
            'skin' => $this->biography->getSkinID(),
            'background' => $this->biography->getBackgroundID(),
            'tab' => $this->activeTab
        ));

        $form->addHidden('tab');

        if($this->elementEnabled('portrait'))
        {
            $portrait = $form->addFile('portrait');
            $portrait->addAccepts(array_keys($this->portraitMimes));
            $portrait->setComment(
                t('Use this to upload your character\'s portrait, or replace an existing one.').' '.
                t('This should be the portrait generated by the EVE client when you select the "Capture portrait" option in a regular character window.').' '.
                t('The size should be %1$s.', $this->portraitSize.' px').' '.
                t('Accepted file types are %1$s and %2$s.', 'JPG', 'PNG')
            );

            $this->portraitEl = $portrait;
        }

        if($this->elementEnabled('biography'))
        {
            $bio = $form->addTextarea('biography');
            $bio->setId($this->editorID);
            $bio->setLabel(t('Biography text'));
            $bio->setRows(25);
            $bio->setComment($this->getBioComments());
        }

        if($this->elementEnabled('font'))
        {
            $fontEl = $form->addSelect('font');
            $fontEl->setLabel(t('Text font'));
            $fontEl->setComment(
                t('Which font to use for the text.').' '.
                t('Note:').' '.
                t('Save the biography to update the font here in the editor.')
            );

            $fonts = $this->website->createFonts()->getAllCategorized();
            foreach($fonts as $type => $items) {
                $group = $fontEl->addOptgroup($type);
                foreach($items as $item) {
                    $group->addOption($item->getLabel(), $item->getID());
                }
            }
        }


        if($this->elementEnabled('skin'))
        {
            $skinEl = $form->addSelect('skin');
            $skinEl->setLabel(t('Skin'));
            $skinEl->setComment(
                t('Which skin to use for the biography.').' '.
                t('You can also click a preview below:')
            );

            $skins = $this->website->createSkins()->getAll();
            foreach($skins as $skin) {
                $skinEl->addOption($skin->getLabel(), $skin->getID());
            }

            $this->renderSkinThumbnails($skinEl);
        }

        if($this->elementEnabled('background'))
        {
            $backEl = $form->addSelect('background');
            $backEl->setLabel(t('Background'));
            $backEl->addOption(t('No background'), 'None');
            $backEl->setComment(
                t('Which background image to use for the biography.').' '.
                t('You can also click a thumbnail below:')
            );

            $backgrounds = $this->website->createBackgrounds()->getAll();
            foreach($backgrounds as $background) {
                $backEl->addOption($background->getLabel(), $background->getID());
            }

            $this->renderBackgroundThumbnails($backEl);
        }

        $buttonIcon = 'magic';
        $buttonLabel = t('Save and publish now');

        if(!$this->character->hasAcceptedTerms())
        {
            $check = $form->addCheckbox('terms_accepted');
            $check->setRuntimeProperty('container-classes', 'element-accept-terms alert alert-warning');
            $check->setLabel(t('I accept %1$s\' terms &amp; conditions', Website::getName()));
            $check->setAttribute('value', 'yes');
            $check->setComment(
                t(
                    'Please take a moment to review our %1$sterms of service and content policy%2$s.',
                    '<a href="'.$this->getScreenURL('Legal').'" target="_blank">',
                    '</a>'
                ).
                '<br>'.
                '<b>'.t('Note:').'</b> '.
                t('Your biography will only be published once you have accepted them.')
            );

            $buttonIcon = 'save';
            $buttonLabel = t('Save now');
        }

        if($this->biography->isBlocked())
        {
            $buttonIcon = 'save';
            $buttonLabel = t('Save now');
        }

        $btn = $form->addButton('save');
        $btn->addClass('btn btn-primary form-btn');
        $btn->setType('submit');
        $btn->setLabel(
            '<i class="fa fa-'.$buttonIcon.'"></i> '.
            $buttonLabel
        );

        if($this->biography->isBlocked())
        {
            $btn = $form->addButton('publish');
            $btn->addClass('btn btn-secondary form-btn');
            $btn->setType('submit');
            $btn->setLabel(
                '<i class="fa fa-life-ring"></i> '.
                t('Save and request moderation')
            );
        }

        $this->form = $form;
    }

    protected function getBioComments()
    {
        $parts = array();
        $parts[] = t(
            'The text format is %1$smarkdown%2$s, which allows you to do some basic styling.',
            '<a href="https://www.markdownguide.org/cheat-sheet" target="_blank">',
            '</a>'
        );
        $parts[] = t('Click the help icon in the editor toolbar to get a reference of the sytnax you may use.');
        $parts[] = t('If you want to do some ASCII art, I recommend selecting a monospace font below.');
        $parts[] = t('The standard font is made for easy reading.');
        $parts[] = '<br><br>';
        $parts[] = t('The minimum text length for publishing is %1$s characters:', Biographies_Biography::MIN_TEXT_LENGTH);
        $parts[] = t('%1$s\'s very existence is to enable you to write more than one-liners :D', $this->website->getName());
        $parts[] = '<br><br>';
        $parts[] = '<b>'.t('A note on moderation:').'</b>';

        if($this->biography->isBlocked())
        {
            $parts[] = ('Your biography has been censored by a moderator, so it is currently hidden.');
            $parts[] = t('If you wish to have it reviewed again by a moderator, make the necessary changes, and click the %1$s button below.', '"'.t('Save and request moderation').'"');
        }
        else
        {
            $parts[] = t('Your changes are published instantly, but will be reviewed by our moderators.');
        }

        return implode(' ', $parts);
    }

    protected function renderSkinThumbnails(\HTML_QuickForm2_Element $el)
    {
        $skins = $this->website->createSkins()->getAll();

        $thumbs = array();
        foreach($skins as $skin)
        {
            $thumbs[] = array(
                'url' => $skin->getThumbnailURL(),
                'label' => $skin->getLabel(),
                'value' => $skin->getID()
            );
        }

        $this->renderThumbnails($el, $thumbs, 'skin-previews');
    }

    protected function renderBackgroundThumbnails(\HTML_QuickForm2_Element $el)
    {
        $backgrounds = $this->website->createBackgrounds()->getAll();

        $thumbs = array();
        foreach($backgrounds as $background)
        {
            $thumbs[] = array(
                'url' => $background->getThumbnailURL(),
                'label' => $background->getLabel(),
                'value' => $background->getID()
            );
        }

        $this->renderThumbnails($el, $thumbs, 'bp-previews');
    }

    protected $thumbnailElements = array();

    protected function renderThumbnails(\HTML_QuickForm2_Element $el, $thumbs, $containerID)
    {
        $id = $el->getId();

        $this->thumbnailElements[] = $id;

        $el->setAttribute('onchange', 'ScreenWrite.ChangeValue($(this));');
        $el->setAttribute('thumbs-container', $containerID);

        $items = array();
        foreach($thumbs as $thumb)
        {
            $items[] = sprintf(
                '<div class="thumb" style="background-image:url(%s)" title="%s" data-value="%s" data-target="%s" onclick="ScreenWrite.SelectThumb($(this));"></div>',
                $thumb['url'],
                $thumb['label'],
                $thumb['value'],
                $id
            );
        }

        $el->setComment($el->getComment().sprintf(
            '<div class="thumbs" id="%s">%s</div>',
            $containerID,
            implode('', $items)
        ));
    }

   /**
    * @return \HTML_QuickForm2
    */
    public function getForm()
    {
        return $this->form;
    }

    protected function saveBiography()
    {
        $values = $this->form->getValues();
        $publishMessage = null;
        $published = false;

        $this->startTransaction();

            if($this->elementEnabled('portrait')) {
                $this->handlePortraitUpload($this->portraitEl->getUpload());
            }

            if(!$this->character->hasAcceptedTerms() && $values['terms_accepted'] === 'yes')
            {
                $this->character->setTermsAccepted();
                $this->character->save();
            }

            if($this->elementEnabled('biography')) {
                $this->biography->setText($values['biography']);
            }

            if($this->elementEnabled('skin')) {
                $this->biography->setSkinID($values['skin']);
            }

            if($this->elementEnabled('background')) {
                $this->biography->setBackgroundID($values['background']);
            }

            if($this->elementEnabled('font')) {
                $this->biography->setFontID($values['font']);
            }

            $modified = $this->biography->save();

            // if all conditions are met, we can publish the biography.
            if($this->character->hasAcceptedTerms())
            {
                if($this->biography->isValid())
                {
                    $wasPublished = $this->biography->isPublished();
                    $published = true;

                    $this->biography->publish();

                    $this->sendPublishNotification($wasPublished);
                }
                else
                {
                    $publishMessage = $this->biography->getValidationMessage();

                    if($this->biography->isBlocked() && isset($values['publish']))
                    {
                        $this->sendPublishNotification(false);

                        $this->redirectWithSuccessMessage(
                            t('Thank you.').' '.t('A moderator will shortly review your biography and publish it again if it conforms to our guidelines.'),
                            $this->getTabURL()
                        );
                    }
                }
            }

        $this->endTransaction();

        if($modified)
        {
            if($published)
            {
                $this->addSuccessMessage(t('The biography has been saved and published successfully at %1$s.', date('H:i:s')));
            }
            else
            {
                if(!empty($publishMessage))
                {
                    $this->addWarningMessage(
                        t('The biography has been saved successfully, but it has not been published yet:').' '.
                        $publishMessage
                    );
                }
                else
                {
                    $this->addSuccessMessage(t('The biography has been saved successfully at %1$s.', date('H:i:s')));
                }
            }
        }
        else
        {
            $this->addInfoMessage(t('No changes were made to the biography.'));
        }

        $this->redirect($this->getTabURL());
    }

    protected function sendPublishNotification($wasPublished)
    {
        if(!$wasPublished)
        {
            $subject = 'New biography: '.$this->character->getName();
        }
        else if($this->biography->isBlocked())
        {
            $subject = 'Uncensor-request: '.$this->character->getName();
        }
        else
        {
            $subject = 'Biography updated: '.$this->character->getName();
        }

        $tpl = $this->createTemplate('mailPublish');
        $tpl->addVar('character', $this->character);
        $tpl->addVar('biography', $this->biography);
        $tpl->addVar('is-initial-publish', !$wasPublished);

        $mailer = $this->website->createAdminMailer($subject);
        $mailer->setHTMLBody($tpl->render());
        $mailer->send();
    }

    protected function getTabURL($tabID=null, $params=array())
    {
        if(empty($tabID)) {
            $tabID = $this->activeTab;
        }

        $params['tab'] = $tabID;

        return $this->getURL($params);
    }

    protected function handlePortraitUpload(\HTML_QuickForm2_Element_InputFile_Upload $upload)
    {
        if(!$upload->isValid()) {
            return;
        }

        $path = $upload->getTempPath();

        $size = getimagesize($path);
        if(!$size)
        {
            $this->addWarningMessage(
                t('Could not use the uploaded portrait:').' '.
                t('It does not seem to be a supported image type.')
            );

            return;
        }

        if($size[0].' x '.$size[1] != $this->portraitSize) {
            $this->addWarningMessage(
                t('Could not use the uploaded portrait:').' '.
                t('It does not match the expected size of %1$s.', $this->portraitSize)
            );

            return;
        }

        if(!isset($this->portraitMimes[$size['mime']])) {
            $this->addWarningMessage(
                t('Could not use the uploaded portrait:').' '.
                t('It is not a recognized image type.').' '.
                t('Valid image types are: %1$s.', implode(', ', array_values($this->portraitMimes)))
            );
        }

        $this->character->setPortraitFileType($this->portraitMimes[$size['mime']]);

        $upload->moveTo($this->character->getPortraitPath());
    }

    protected function handlePortraitDelete()
    {
        if($this->character->hasPortrait()) {
            unlink($this->character->getPortraitPath());
        }

        $this->redirectWithSuccessMessage(
            t('The portrait has been deleted successfully at %1$s.', date('H:i:s')),
            $this->character->getWriteURL()
        );
    }
}
